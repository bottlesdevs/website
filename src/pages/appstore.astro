---
import Layout from '../layouts/Layout.astro';
import { Icon } from 'astro-icon/components';
---

<Layout title="AppStore">

  <section class="p-10 bg-[var(--md-sys-color-surface)] text-[var(--md-sys-color-on-surface)]">
    <div class="container mx-auto px-4">
      <div class="text-center mb-10">
        <h1 class="text-5xl font-bold mb-4">AppStore</h1>
        <p class="text-lg">Overview of the installers available in Bottles.</p>
      </div>
    </div>
    <div class="flex justify-center mb-8">
      <div class="relative w-full max-w-md">
        <input type="search" id="storeSearch" autocomplete="off" placeholder="" class="w-full py-2 pl-10 pr-4 rounded-full bg-[var(--md-sys-color-surface-container)]" />
        <Icon name="material-symbols:search" class="absolute top-2 left-2 w-6 h-6 text-[var(--md-sys-color-on-surface)]/50" />
      </div>
    </div>
  </section>

  <div class="container mx-auto px-4 mt-8">
      <div id="filters" class="flex mb-8 space-x-4 overflow-x-auto md:overflow-x-hidden w-full md:justify-center">
        <button id="allFilter" class="md-filled-button">All</button>
        <button id="platinumFilter" class="md-filled-button opacity-50">Platinum</button>
        <button id="goldFilter" class="md-filled-button opacity-50">Gold</button>
        <button id="silverFilter" class="md-filled-button opacity-50">Silver</button>
        <button id="bronzeFilter" class="md-filled-button opacity-50">Bronze</button>
      </div>

      <div id="storeResults" class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- JS will inject cards here -->
      </div>
  </div>

  <div class="modal" id="modal_installer"></div>
  <div class="modal" id="modal_review"></div>

</Layout>

<script>
import jsyaml from 'js-yaml';

interface Installer {
  Name: string;
  Description: string;
  Icon: string;
  Grade: string;
  Category: string;
}

class AppStore {
  searchInput: HTMLInputElement | null;
  filters: { [key: string]: HTMLElement | null };
  storeResults: HTMLElement | null;

  constructor() {
    this.searchInput = document.getElementById('storeSearch') as HTMLInputElement;
    this.storeResults = document.getElementById('storeResults');
    this.filters = {
      all: document.getElementById('allFilter'),
      platinum: document.getElementById('platinumFilter'),
      gold: document.getElementById('goldFilter'),
      silver: document.getElementById('silverFilter'),
      bronze: document.getElementById('bronzeFilter'),
    };

    this.initSearch();
    this.initFilters();
    this.fetchInstallers();
  }

  initSearch(): void {
    if (this.searchInput) {
      this.searchInput.addEventListener('keyup', () => {
        const search = this.searchInput?.value.toLowerCase() || '';
        const cards = document.querySelectorAll('#storeResults .card');
        cards.forEach((card) => {
          const text = card.textContent?.toLowerCase() || '';
          (card as HTMLElement).style.display = text.includes(search) ? 'flex' : 'none';
        });
      });
    }
  }

  initFilters(): void {
    for (const filter in this.filters) {
      const button = this.filters[filter];
      if (button) {
        button.addEventListener('click', () => {
          const cards = document.querySelectorAll('#storeResults .card');
          const filterValue = filter === 'all' ? '' : filter;

          cards.forEach((card) => {
            const grade = (card as HTMLElement).getAttribute('grade') || '';
            const category = (card as HTMLElement).getAttribute('category') || '';

            (card as HTMLElement).style.display = filter === 'all' || grade === filterValue || category === filterValue ? 'flex' : 'none';
          });

          for (const filter in this.filters) {
            if (this.filters[filter]) {
              this.filters[filter]?.classList.add('opacity-50');
              this.filters[filter]?.classList.remove('shadow-lg');
            }
          }

          button.classList.remove('opacity-50');
          button.classList.add('shadow-lg');
        });
      }
    }
  }

  fetchInstallers(): void {
    fetch('https://raw.githubusercontent.com/bottlesdevs/programs/main/index.yml')
      .then((response) => response.text())
      .then((data) => {
        const installers: { [key: string]: Installer } = jsyaml.load(data) as { [key: string]: Installer };

        if (typeof installers === 'object' && this.storeResults) {
          const installerNames = Object.keys(installers);
          const randomInstallerName = installerNames[Math.floor(Math.random() * installerNames.length)];
          if (this.searchInput) {
            this.searchInput.placeholder = installers[randomInstallerName].Name;
          }

          for (const item in installers) {
            const installer = installers[item];
            const icon = `https://github.com/bottlesdevs/programs/blob/main/data/${item}/${installer.Icon}?raw=true`;
            const cardHTML = this.generateCardHTML(item, installer, icon);
            this.storeResults.innerHTML += cardHTML;
          }
        }
      })
      .catch((err) => console.error('Failed to fetch Installers database index!', err));
  }

  getGradeColor(grade: string): string {
    switch (grade.toLowerCase()) {
      case 'platinum':
        return 'bg-[var(--md-sys-color-primary)]/20 text-[var(--md-sys-color-primary)]';
      case 'gold':
        return 'bg-amber-200 text-amber-900';
      case 'silver':
        return 'bg-zinc-200 text-zinc-800';
      case 'bronze':
        return 'bg-amber-600 text-amber-50';
      default:
        return 'bg-[var(--md-sys-color-secondary-container)] text-[var(--md-sys-color-on-secondary-container)]';
    }
  }

  getCategoryColor(category: string): string {
    switch (category.toLowerCase()) {
      case 'software':
        return 'bg-[var(--md-sys-color-primary)]/20 text-[var(--md-sys-color-primary)]';
      case 'games':
        return 'bg-[var(--md-sys-color-tertiary)]/20 text-[var(--md-sys-color-tertiary)]';
      default:
        return 'bg-[var(--md-sys-color-secondary)]/20 text-[var(--md-sys-color-secondary)]';
    }
  }

  generateCardHTML(item: string, installer: Installer, icon: string): string {
    return `
      <div grade="${installer.Grade.toLowerCase()}" category="${installer.Category.toLowerCase()}" class="card md-card p-4 flex flex-col justify-between relative top-0 transition-all hover:-top-1">
        <div>
          <div class="flex gap-4">
            <img src="${icon}" alt="${item}" class="w-8 h-8 self-center">
            <h3 class="text-2xl font-bold mb-2">${installer.Name}</h3>
          </div>
          <p class="mb-4 text-xl">${installer.Description}</p>
          <div class="tags flex flex-wrap gap-2 mb-4">
            <span class="md-chip ${this.getGradeColor(installer.Grade)}">${installer.Grade}</span>
            <span class="md-chip ${this.getCategoryColor(installer.Category)}">${installer.Category}</span>
          </div>
        </div>
        <div class="flex gap-2 mt-2">
          <a class="md-tonal-button flex-1 text-center" href="/app#${item}">Details</a>
          <a class="md-filled-button flex-1 text-center" href="https://docs.usebottles.com/bottles/installers#use-installers">Install</a>
        </div>
      </div>`;
    }
}

document.addEventListener('DOMContentLoaded', () => {
  new AppStore();
});
</script>

</Layout>
